<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 设置使用注解的类所在的包 -->
    <context:component-scan base-package="com" />
    <!-- 完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
            </list>
        </property>
    </bean>
    <!-- 支持注解映射，找到properties信息文件-->
    <mvc:annotation-driven validator="validator"/>

    <!-- 处理静态资源，如css,js,image -->
    <mvc:resources location="/image/" mapping="/image/**"/>
    <mvc:resources location="/css/" mapping="/css/**"/>
    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/fonts/" mapping="/fonts/**"/>

    <!-- 定义跳转的文件的前后缀 ，视图模式配置,放在xmle-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>


	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 文件最大上传10M-->
        <property name="maxUploadSize" value="10485760" />

		<property name="maxInMemorySize" value="4096" />

		<property name="defaultEncoding" value="UTF-8"></property>
        <!-- 取消延迟加载,提高性能-->
        <property name="resolveLazily" value="true"></property>
	</bean>

    <!-- 指定自己定义的validator -->

    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>

    <!-- 国际化的消息资源文件,可有多个资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                <value>classpath:messages</value>
            </list>
        </property>
        <!--国际化找不到就用代码作名称-->
        <property name="useCodeAsDefaultMessage" value="true"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="0"/>
    </bean>

    <mvc:resources location="/image/" mapping="/image/**"/>
    <mvc:resources location="/css/" mapping="/css/**"/>
    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/fonts/" mapping="/fonts/**"/>
    <!--如果没有interceptors拦截器则会默认进入WEB-INF下的index.jsp-->
    <mvc:view-controller path="/" view-name="index"/>
    <!--注册拦截器-->
    <mvc:interceptors>
    <!-- 使用bean定义一个Interceptor，
         直接定义在mvc:interceptors根下面的SpringMVCInterceptor将拦截所有的请求
        <mvc:mapping path="/**" /> 如果只写一个*，则不能拦截类似/*/*的请求。
        静态资源的请求需要判断不进行拦截
        -->
    <mvc:interceptor>
        <!--定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的,/**的意思是所有文件夹及里面的子文件夹-->
        <mvc:mapping path="/**"/>
        <!--针对静态资源不进行过滤-->
        <mvc:exclude-mapping path="/**/login/user"/>
        <mvc:exclude-mapping path="/**/login.jsp"/>
        <mvc:exclude-mapping path="/fonts/**"/>
        <mvc:exclude-mapping path="/css/**"/>
        <mvc:exclude-mapping path="/js/**"/>
        <mvc:exclude-mapping path="/image/**"/>
        <bean class="com.handler.SpringMVCInterceptor"/>
    </mvc:interceptor>

  </mvc:interceptors>


</beans>




